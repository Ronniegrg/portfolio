{"version":3,"file":"AdminPanel-B3RIvHaW.js","sources":["../../src/components/PerformanceChart.jsx","../../src/components/CLSChart.jsx","../../src/pages/AdminPanel.jsx"],"sourcesContent":["import { Bar } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { useContext } from \"react\";\nimport ThemeContext from \"../context/ThemeContextInstance\";\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\n/**\n * Component for visualizing performance metrics in a bar chart\n * @param {Object} props - Component props\n * @param {Object} props.metrics - Performance metrics data\n */\nconst PerformanceChart = ({ metrics }) => {\n  // Get theme context to adapt chart colors\n  const { isDarkMode } = useContext(ThemeContext);\n\n  // Set chart colors based on theme\n  const textColor = isDarkMode ? \"#e1e1e1\" : \"#333333\";\n  const gridColor = isDarkMode\n    ? \"rgba(255, 255, 255, 0.1)\"\n    : \"rgba(0, 0, 0, 0.1)\";\n\n  // Prepare data for the chart\n  const chartData = {\n    labels: [\"FCP\", \"LCP\", \"TTFB\", \"FID\", \"CLS\"],\n    datasets: [\n      {\n        label: \"Performance Metrics (ms)\",\n        data: [\n          metrics.fcp,\n          metrics.lcp,\n          metrics.ttfb,\n          metrics.fid,\n          // CLS needs to be multiplied for better visualization\n          metrics.cls ? metrics.cls * 1000 : null,\n        ],\n        backgroundColor: [\n          \"rgba(54, 162, 235, 0.7)\", // FCP - Blue\n          \"rgba(255, 206, 86, 0.7)\", // LCP - Yellow\n          \"rgba(75, 192, 192, 0.7)\", // TTFB - Teal\n          \"rgba(153, 102, 255, 0.7)\", // FID - Purple\n          \"rgba(255, 99, 132, 0.7)\", // CLS - Red\n        ],\n        borderColor: [\n          \"rgba(54, 162, 235, 1)\",\n          \"rgba(255, 206, 86, 1)\",\n          \"rgba(75, 192, 192, 1)\",\n          \"rgba(153, 102, 255, 1)\",\n          \"rgba(255, 99, 132, 1)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  // Chart options\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: {\n          color: textColor,\n        },\n        grid: {\n          color: gridColor,\n        },\n        title: {\n          display: true,\n          text: \"Time (ms)\",\n          color: textColor,\n        },\n      },\n      x: {\n        ticks: {\n          color: textColor,\n        },\n        grid: {\n          color: gridColor,\n        },\n      },\n    },\n    plugins: {\n      legend: {\n        labels: {\n          color: textColor,\n        },\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            let label = context.dataset.label || \"\";\n            if (label) {\n              label += \": \";\n            }\n            if (context.parsed.y !== null) {\n              // Check if this is the CLS metric (which is the 5th item in our data array)\n              if (context.dataIndex === 4) {\n                // Convert back to original CLS value for display\n                label += (context.parsed.y / 1000).toFixed(4);\n              } else {\n                label += context.parsed.y.toFixed(2) + \" ms\";\n              }\n            }\n            return label;\n          },\n        },\n      },\n      title: {\n        display: true,\n        text: \"Web Vitals Performance Metrics\",\n        color: textColor,\n        font: {\n          size: 16,\n        },\n      },\n    },\n  };\n  // Show placeholder if metrics are not available\n  if (\n    !metrics.fcp &&\n    !metrics.lcp &&\n    !metrics.ttfb &&\n    !metrics.fid &&\n    !metrics.cls\n  ) {\n    return (\n      <div\n        className=\"chart-container\"\n        style={{\n          height: \"400px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <p>No performance data available yet</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chart-container\" style={{ height: \"400px\" }}>\n      <Bar data={chartData} options={options} />\n    </div>\n  );\n};\n\nexport default PerformanceChart;\n","import { Doughnut } from \"react-chartjs-2\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport { useContext } from \"react\";\nimport ThemeContext from \"../context/ThemeContextInstance\";\n\n// Register ChartJS components\nChartJS.register(ArcElement, Tooltip, Legend);\n\n/**\n * Component for visualizing Cumulative Layout Shift metric\n * @param {Object} props - Component props\n * @param {number} props.cls - Cumulative Layout Shift score\n */\nconst CLSChart = ({ cls }) => {\n  // Get theme context to adapt chart colors\n  const { isDarkMode } = useContext(ThemeContext);\n\n  // Set chart colors based on theme\n  const textColor = isDarkMode ? \"#e1e1e1\" : \"#333333\";\n\n  // CLS score zones (based on web.dev CLS thresholds)\n  // Good: 0 to 0.1, Needs Improvement: 0.1 to 0.25, Poor: > 0.25\n  let backgroundColor = \"rgba(75, 192, 100, 0.7)\"; // Good - Green\n  let borderColor = \"rgba(75, 192, 100, 1)\";\n\n  if (cls > 0.25) {\n    backgroundColor = \"rgba(255, 99, 132, 0.7)\"; // Poor - Red\n    borderColor = \"rgba(255, 99, 132, 1)\";\n  } else if (cls > 0.1) {\n    backgroundColor = \"rgba(255, 206, 86, 0.7)\"; // Needs improvement - Yellow\n    borderColor = \"rgba(255, 206, 86, 1)\";\n  }\n\n  // Calculate the remaining segment (to make a full circle)\n  const remainingSegment = cls < 1 ? 1 - cls : 0;\n\n  // Prepare data for the doughnut chart\n  const chartData = {\n    labels: [\"CLS Score\", \"\"],\n    datasets: [\n      {\n        data: [cls, remainingSegment],\n        backgroundColor: [\n          backgroundColor,\n          isDarkMode ? \"rgba(50, 50, 50, 0.2)\" : \"rgba(240, 240, 240, 0.5)\",\n        ],\n        borderColor: [\n          borderColor,\n          isDarkMode ? \"rgba(50, 50, 50, 0.1)\" : \"rgba(240, 240, 240, 0.3)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  // Chart options\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    cutout: \"70%\",\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            if (context.dataIndex === 0) {\n              return `CLS: ${context.raw.toFixed(3)}`;\n            }\n            return \"\";\n          },\n        },\n      },\n      title: {\n        display: true,\n        text: \"Cumulative Layout Shift\",\n        color: textColor,\n        font: {\n          size: 16,\n        },\n      },\n    },\n  };\n\n  // Get scoring description\n  let scoreDescription = \"Good\";\n  let scoreColor = \"#4CAF50\";\n\n  if (cls > 0.25) {\n    scoreDescription = \"Poor\";\n    scoreColor = \"#F44336\";\n  } else if (cls > 0.1) {\n    scoreDescription = \"Needs Improvement\";\n    scoreColor = \"#FFC107\";\n  }\n\n  // Show placeholder if metrics are not available\n  if (cls === null) {\n    return (\n      <div\n        className=\"chart-container\"\n        style={{\n          height: \"300px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <p>No CLS data available yet</p>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className=\"chart-container\"\n      style={{ height: \"300px\", position: \"relative\" }}\n    >\n      <Doughnut data={chartData} options={options} />\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: \"translate(-50%, -50%)\",\n          textAlign: \"center\",\n          pointerEvents: \"none\",\n        }}\n      >\n        <div\n          style={{ fontSize: \"24px\", fontWeight: \"bold\", color: scoreColor }}\n        >\n          {cls.toFixed(3)}\n        </div>\n        <div style={{ fontSize: \"14px\", color: scoreColor }}>\n          {scoreDescription}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CLSChart;\n","import { useState, useEffect, useMemo } from \"react\";\nimport SimpleAnalytics from \"../components/SimpleAnalytics\";\nimport PerformanceChart from \"../components/PerformanceChart\";\nimport CLSChart from \"../components/CLSChart\";\nimport usePerformanceMonitoring from \"../hooks/usePerformanceMonitoring\";\nimport styles from \"./AdminPanel.module.css\";\n\n// Helper functions for enhanced UI\nconst getInteractionIcon = (type) => {\n  const icons = {\n    click: \"👆\",\n    scroll: \"📜\",\n    hover: \"🖱️\",\n    focus: \"🎯\",\n    submit: \"📤\",\n    download: \"💾\",\n    navigation: \"🧭\",\n    search: \"🔍\",\n    default: \"⚡\",\n  };\n  return icons[type.toLowerCase()] || icons.default;\n};\n\nconst getInteractionTrend = (type) => {\n  const trends = {\n    click: \"🔥 Hot\",\n    scroll: \"📈 Rising\",\n    hover: \"⭐ Popular\",\n    focus: \"💎 Premium\",\n    submit: \"✅ Active\",\n    download: \"📥 Trending\",\n    navigation: \"🚀 Fast\",\n    search: \"🔍 Explored\",\n    default: \"📊 Normal\",\n  };\n  return trends[type.toLowerCase()] || trends.default;\n};\n\nconst AdminPanel = () => {\n  const [analyticsData, setAnalyticsData] = useState(null);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [isAuthorized, setIsAuthorized] = useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [dateFilter, setDateFilter] = useState(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [lastRefresh, setLastRefresh] = useState(new Date());\n  const [sortBy, setSortBy] = useState(\"timestamp\");\n  const [sortOrder, setSortOrder] = useState(\"desc\");\n\n  // Get performance metrics using our custom hook\n  const performanceMetrics = usePerformanceMonitoring();\n\n  // Get analytics data when component mounts\n  useEffect(() => {\n    if (isAuthorized) {\n      setIsLoading(true);\n      const data = SimpleAnalytics.getData();\n      setAnalyticsData(data);\n      setIsLoading(false);\n    }\n  }, [isAuthorized]);\n\n  // Auto-refresh data every 30 seconds (only if autoRefresh is enabled)\n  useEffect(() => {\n    if (!isAuthorized || !autoRefresh) return;\n\n    const interval = setInterval(() => {\n      const data = SimpleAnalytics.getData();\n      setAnalyticsData(data);\n      setLastRefresh(new Date());\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, [isAuthorized, autoRefresh]);\n\n  // Filtered and sorted data based on date, search, and sort preferences\n  const filteredData = useMemo(() => {\n    if (!analyticsData) return null;\n\n    const now = new Date();\n    const filterDate = (items) => {\n      if (dateFilter === \"all\") return items;\n\n      const cutoffDate = new Date();\n      switch (dateFilter) {\n        case \"today\":\n          cutoffDate.setHours(0, 0, 0, 0);\n          break;\n        case \"week\":\n          cutoffDate.setDate(now.getDate() - 7);\n          break;\n        case \"month\":\n          cutoffDate.setMonth(now.getMonth() - 1);\n          break;\n        default:\n          return items;\n      }\n\n      return items.filter((item) => new Date(item.timestamp) >= cutoffDate);\n    };\n\n    const filterSearch = (items, searchField) => {\n      if (!searchTerm) return items;\n      return items.filter((item) =>\n        item[searchField]?.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    };\n\n    const sortItems = (items) => {\n      return items.sort((a, b) => {\n        let aValue = a[sortBy];\n        let bValue = b[sortBy];\n\n        if (sortBy === \"timestamp\") {\n          aValue = new Date(aValue);\n          bValue = new Date(bValue);\n        }\n\n        if (sortOrder === \"asc\") {\n          return aValue > bValue ? 1 : -1;\n        } else {\n          return aValue < bValue ? 1 : -1;\n        }\n      });\n    };\n\n    const filteredPageViews = sortItems(\n      filterSearch(filterDate(analyticsData.pageViews), \"path\")\n    );\n    const filteredInteractions = sortItems(\n      filterSearch(filterDate(analyticsData.interactions), \"type\")\n    );\n\n    return {\n      ...analyticsData,\n      pageViews: filteredPageViews,\n      interactions: filteredInteractions,\n    };\n  }, [analyticsData, dateFilter, searchTerm, sortBy, sortOrder]);\n\n  // Enhanced analytics calculations\n  const enhancedSummary = useMemo(() => {\n    if (!filteredData) return null;\n\n    const { pageViews, interactions } = filteredData;\n\n    // Calculate page view counts\n    const pageViewCounts = pageViews.reduce((acc, view) => {\n      acc[view.path] = (acc[view.path] || 0) + 1;\n      return acc;\n    }, {});\n\n    // Calculate bounce rate (single page sessions)\n    const sessions = new Map();\n    pageViews.forEach((view) => {\n      const sessionKey = view.sessionId || view.timestamp; // fallback if no sessionId\n      if (!sessions.has(sessionKey)) {\n        sessions.set(sessionKey, []);\n      }\n      sessions.get(sessionKey).push(view);\n    });\n\n    const bounceRate =\n      (Array.from(sessions.values()).filter((session) => session.length === 1)\n        .length /\n        sessions.size) *\n      100;\n\n    // Top pages\n    const topPages = Object.entries(pageViewCounts)\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 5);\n\n    // Interaction types\n    const interactionTypes = interactions.reduce((acc, interaction) => {\n      acc[interaction.type] = (acc[interaction.type] || 0) + 1;\n      return acc;\n    }, {});\n\n    // Traffic sources\n    const trafficSources = pageViews.reduce((acc, view) => {\n      const source = view.referrer || \"Direct\";\n      acc[source] = (acc[source] || 0) + 1;\n      return acc;\n    }, {});\n\n    return {\n      totalPageViews: pageViews.length,\n      totalInteractions: interactions.length,\n      uniquePaths: Object.keys(pageViewCounts).length,\n      bounceRate: isNaN(bounceRate) ? 0 : bounceRate,\n      topPages,\n      interactionTypes,\n      trafficSources,\n      sessionsCount: sessions.size,\n    };\n  }, [filteredData]);\n\n  // Export data functionality\n  const exportData = (format = \"json\") => {\n    if (!analyticsData) return;\n\n    const dataToExport = {\n      ...analyticsData,\n      exportDate: new Date().toISOString(),\n      summary: enhancedSummary,\n    };\n\n    if (format === \"json\") {\n      const blob = new Blob([JSON.stringify(dataToExport, null, 2)], {\n        type: \"application/json\",\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `analytics-${new Date().toISOString().split(\"T\")[0]}.json`;\n      a.click();\n      URL.revokeObjectURL(url);\n    } else if (format === \"csv\") {\n      const csvData = [\n        [\"Path\", \"Timestamp\", \"Referrer\"],\n        ...analyticsData.pageViews.map((view) => [\n          view.path,\n          view.timestamp,\n          view.referrer || \"\",\n        ]),\n      ];\n\n      const csvContent = csvData\n        .map((row) => row.map((cell) => `\"${cell}\"`).join(\",\"))\n        .join(\"\\n\");\n      const blob = new Blob([csvContent], { type: \"text/csv\" });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `analytics-${new Date().toISOString().split(\"T\")[0]}.csv`;\n      a.click();\n      URL.revokeObjectURL(url);\n    }\n  };\n\n  // Simple authorization method (this would be much more secure in a real app)\n  const handleAuth = (e) => {\n    e.preventDefault();\n    // Replace with your chosen password\n    if (password === \"portfolio-admin\") {\n      setIsAuthorized(true);\n    } else {\n      alert(\"Invalid password\");\n    }\n  };\n\n  // Format date for display\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString();\n  };\n\n  // Format relative time\n  const formatRelativeTime = (dateString) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diff = now - date;\n\n    const minutes = Math.floor(diff / (1000 * 60));\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    if (minutes < 60) return `${minutes}m ago`;\n    if (hours < 24) return `${hours}h ago`;\n    return `${days}d ago`;\n  };\n\n  // Login form if not authorized\n  if (!isAuthorized) {\n    return (\n      <div className={styles.authContainer}>\n        <div className={styles.authForm}>\n          <div className={styles.authHeader}>\n            <div className={styles.authIcon}>📊</div>\n            <h2>Analytics Dashboard</h2>\n            <p>Enter admin password to access the dashboard</p>\n          </div>\n          <form onSubmit={handleAuth}>\n            <input\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Password\"\n              className={styles.input}\n              required\n            />\n            <button type=\"submit\" className={styles.button}>\n              Access Dashboard\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n\n  // Display loading state\n  if (isLoading || !analyticsData || !enhancedSummary) {\n    return (\n      <div className={styles.container}>\n        <div className={styles.loadingSpinner}>\n          <div className={styles.spinner}></div>\n          <p>Loading analytics data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      {/* Header */}\n      <div className={styles.header}>\n        <div className={styles.headerContent}>\n          <h1 className={styles.heading}>\n            <span className={styles.headingIcon}>📊</span>\n            Analytics Dashboard\n          </h1>\n          <div className={styles.headerActions}>\n            <div className={styles.autoRefreshToggle}>\n              <label className={styles.toggleLabel}>\n                <input\n                  type=\"checkbox\"\n                  checked={autoRefresh}\n                  onChange={(e) => setAutoRefresh(e.target.checked)}\n                  className={styles.checkbox}\n                />\n                Auto-refresh\n              </label>\n            </div>\n            <button\n              className={styles.refreshButton}\n              onClick={() => {\n                const data = SimpleAnalytics.getData();\n                setAnalyticsData(data);\n                setLastRefresh(new Date());\n              }}\n            >\n              🔄 Refresh\n            </button>\n            <div className={styles.exportDropdown}>\n              <button className={styles.exportButton}>📥 Export</button>\n              <div className={styles.exportMenu}>\n                <button onClick={() => exportData(\"json\")}>JSON</button>\n                <button onClick={() => exportData(\"csv\")}>CSV</button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className={styles.filters}>\n          <div className={styles.filterGroup}>\n            <label>Time Period:</label>\n            <select\n              value={dateFilter}\n              onChange={(e) => setDateFilter(e.target.value)}\n              className={styles.select}\n            >\n              <option value=\"all\">All Time</option>\n              <option value=\"today\">Today</option>\n              <option value=\"week\">Last 7 Days</option>\n              <option value=\"month\">Last 30 Days</option>\n            </select>\n          </div>\n          <div className={styles.filterGroup}>\n            <label>Sort By:</label>\n            <select\n              value={sortBy}\n              onChange={(e) => setSortBy(e.target.value)}\n              className={styles.select}\n            >\n              <option value=\"timestamp\">Time</option>\n              <option value=\"path\">Path</option>\n              <option value=\"type\">Type</option>\n            </select>\n          </div>\n          <div className={styles.filterGroup}>\n            <label>Order:</label>\n            <select\n              value={sortOrder}\n              onChange={(e) => setSortOrder(e.target.value)}\n              className={styles.select}\n            >\n              <option value=\"desc\">Newest First</option>\n              <option value=\"asc\">Oldest First</option>\n            </select>\n          </div>\n          <div className={styles.filterGroup}>\n            <label>Search:</label>\n            <input\n              type=\"text\"\n              placeholder=\"Search pages, interactions...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className={styles.searchInput}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className={styles.summaryGrid}>\n        <div className={styles.summaryCard}>\n          <div className={styles.cardIcon}>👁️</div>\n          <div className={styles.cardContent}>\n            <h3>Page Views</h3>\n            <p className={styles.cardValue}>\n              {enhancedSummary.totalPageViews.toLocaleString()}\n            </p>\n            <span className={styles.cardSubtext}>Total visits</span>\n          </div>\n        </div>\n\n        <div className={styles.summaryCard}>\n          <div className={styles.cardIcon}>🎯</div>\n          <div className={styles.cardContent}>\n            <h3>Interactions</h3>\n            <p className={styles.cardValue}>\n              {enhancedSummary.totalInteractions.toLocaleString()}\n            </p>\n            <span className={styles.cardSubtext}>User actions</span>\n          </div>\n        </div>\n\n        <div className={styles.summaryCard}>\n          <div className={styles.cardIcon}>📄</div>\n          <div className={styles.cardContent}>\n            <h3>Unique Pages</h3>\n            <p className={styles.cardValue}>{enhancedSummary.uniquePaths}</p>\n            <span className={styles.cardSubtext}>Different paths</span>\n          </div>\n        </div>\n\n        <div className={styles.summaryCard}>\n          <div className={styles.cardIcon}>⚡</div>\n          <div className={styles.cardContent}>\n            <h3>Bounce Rate</h3>\n            <p className={styles.cardValue}>\n              {enhancedSummary.bounceRate.toFixed(1)}%\n            </p>\n            <span className={styles.cardSubtext}>Single page visits</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Tabs */}\n      <div className={styles.tabsContainer}>\n        <div className={styles.tabs}>\n          {[\n            { key: \"overview\", label: \"Overview\", icon: \"📈\" },\n            { key: \"pageViews\", label: \"Page Views\", icon: \"👁️\" },\n            { key: \"interactions\", label: \"Interactions\", icon: \"🎯\" },\n            { key: \"performance\", label: \"Performance\", icon: \"⚡\" },\n            { key: \"traffic\", label: \"Traffic Sources\", icon: \"🌐\" },\n          ].map((tab) => (\n            <button\n              key={tab.key}\n              className={`${styles.tab} ${\n                activeTab === tab.key ? styles.activeTab : \"\"\n              }`}\n              onClick={() => setActiveTab(tab.key)}\n            >\n              <span className={styles.tabIcon}>{tab.icon}</span>\n              {tab.label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Content Area */}\n      <div className={styles.contentArea}>\n        {activeTab === \"overview\" && (\n          <div className={styles.overviewGrid}>\n            {/* Real-time Stats */}\n            <div className={styles.overviewCard}>\n              <h3>\n                <span className={styles.cardIconBadge}>📊</span>\n                Real-time Statistics\n                <span className={styles.liveIndicator}>🔴 LIVE</span>\n              </h3>\n              <div className={styles.realtimeStats}>\n                <div className={styles.statItem}>\n                  <span className={styles.statLabel}>\n                    <span className={styles.statIcon}>👥</span>\n                    Active Sessions\n                  </span>\n                  <span className={styles.statValue}>\n                    {enhancedSummary.sessionsCount}\n                  </span>\n                </div>\n                <div className={styles.statItem}>\n                  <span className={styles.statLabel}>\n                    <span className={styles.statIcon}>📄</span>\n                    Avg. Pages/Session\n                  </span>\n                  <span className={styles.statValue}>\n                    {enhancedSummary.sessionsCount > 0\n                      ? (\n                          enhancedSummary.totalPageViews /\n                          enhancedSummary.sessionsCount\n                        ).toFixed(1)\n                      : \"0\"}\n                  </span>\n                </div>\n                <div className={styles.statItem}>\n                  <span className={styles.statLabel}>\n                    <span className={styles.statIcon}>⚡</span>\n                    Auto-refresh\n                  </span>\n                  <span\n                    className={`${styles.statValue} ${\n                      autoRefresh ? styles.active : styles.inactive\n                    }`}\n                  >\n                    {autoRefresh ? \"🟢 ON\" : \"🔴 OFF\"}\n                  </span>\n                </div>\n                <div className={styles.statItem}>\n                  <span className={styles.statLabel}>\n                    <span className={styles.statIcon}>🕒</span>\n                    Last Updated\n                  </span>\n                  <span className={styles.statValue}>\n                    {lastRefresh.toLocaleTimeString()}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Top Pages */}\n            <div className={styles.overviewCard}>\n              <h3>\n                <span className={styles.cardIconBadge}>🏆</span>\n                Most Popular Pages\n                <span className={styles.trendIndicator}>📈 +12%</span>\n              </h3>\n              <div className={styles.topPagesList}>\n                {enhancedSummary.topPages.length > 0 ? (\n                  enhancedSummary.topPages.map(([path, count], index) => (\n                    <div key={path} className={styles.topPageItem}>\n                      <span className={styles.pageRank}>#{index + 1}</span>\n                      <div className={styles.pageInfo}>\n                        <span className={styles.pagePath}>{path}</span>\n                        <div className={styles.pageStats}>\n                          <span className={styles.pageCount}>\n                            {count} views\n                          </span>\n                          <span className={styles.pagePercentage}>\n                            {(\n                              (count / enhancedSummary.totalPageViews) *\n                              100\n                            ).toFixed(1)}\n                            %\n                          </span>\n                        </div>\n                      </div>\n                      <div className={styles.pageProgress}>\n                        <div\n                          className={styles.progressBar}\n                          style={{\n                            width: `${\n                              (count / enhancedSummary.topPages[0][1]) * 100\n                            }%`,\n                          }}\n                        ></div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className={styles.noData}>\n                    <span className={styles.noDataIcon}>📭</span>\n                    No page views recorded yet\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Interaction Types */}\n            <div className={styles.overviewCard}>\n              <h3>\n                <span className={styles.cardIconBadge}>🎯</span>\n                User Engagement\n                <span className={styles.engagementScore}>Score: 8.5/10</span>\n              </h3>\n              <div className={styles.interactionTypes}>\n                {Object.entries(enhancedSummary.interactionTypes).length > 0 ? (\n                  Object.entries(enhancedSummary.interactionTypes).map(\n                    ([type, count]) => (\n                      <div key={type} className={styles.interactionItem}>\n                        <div className={styles.interactionHeader}>\n                          <span className={styles.interactionType}>\n                            {getInteractionIcon(type)} {type}\n                          </span>\n                          <span className={styles.interactionBadge}>\n                            {getInteractionTrend(type)}\n                          </span>\n                        </div>\n                        <div className={styles.interactionMetrics}>\n                          <span className={styles.interactionCount}>\n                            {count}\n                          </span>\n                          <span className={styles.interactionRate}>\n                            {(\n                              (count / enhancedSummary.totalInteractions) *\n                              100\n                            ).toFixed(1)}\n                            %\n                          </span>\n                        </div>\n                      </div>\n                    )\n                  )\n                ) : (\n                  <div className={styles.noData}>\n                    <span className={styles.noDataIcon}>🎭</span>\n                    No interactions recorded yet\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Performance Overview */}\n            <div className={styles.overviewCard}>\n              <h3>⚡ Performance Overview</h3>\n              <div className={styles.performanceOverview}>\n                <div className={styles.metricItem}>\n                  <span>LCP</span>\n                  <span>\n                    {performanceMetrics.lcp\n                      ? `${performanceMetrics.lcp.toFixed(0)}ms`\n                      : \"N/A\"}\n                  </span>\n                </div>\n                <div className={styles.metricItem}>\n                  <span>FCP</span>\n                  <span>\n                    {performanceMetrics.fcp\n                      ? `${performanceMetrics.fcp.toFixed(0)}ms`\n                      : \"N/A\"}\n                  </span>\n                </div>\n                <div className={styles.metricItem}>\n                  <span>CLS</span>\n                  <span>\n                    {performanceMetrics.cls\n                      ? performanceMetrics.cls.toFixed(3)\n                      : \"N/A\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Traffic Sources */}\n            <div className={styles.overviewCard}>\n              <h3>🌐 Traffic Sources Overview</h3>\n              <div className={styles.trafficSourcesPreview}>\n                {Object.entries(enhancedSummary.trafficSources).length > 0 ? (\n                  Object.entries(enhancedSummary.trafficSources)\n                    .sort((a, b) => b[1] - a[1])\n                    .slice(0, 3)\n                    .map(([source, count]) => (\n                      <div key={source} className={styles.sourcePreviewItem}>\n                        <span className={styles.sourceName}>{source}</span>\n                        <span className={styles.sourceCount}>{count}</span>\n                      </div>\n                    ))\n                ) : (\n                  <div className={styles.noData}>\n                    No traffic sources recorded yet\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Recent Activity */}\n            <div className={styles.overviewCard}>\n              <h3>🕐 Recent Activity</h3>\n              <div className={styles.recentActivity}>\n                {filteredData.pageViews.length > 0 ? (\n                  filteredData.pageViews\n                    .slice()\n                    .reverse()\n                    .slice(0, 5)\n                    .map((view, index) => (\n                      <div key={index} className={styles.activityItem}>\n                        <span className={styles.activityPath}>{view.path}</span>\n                        <span className={styles.activityTime}>\n                          {formatRelativeTime(view.timestamp)}\n                        </span>\n                      </div>\n                    ))\n                ) : (\n                  <div className={styles.noData}>No recent activity</div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === \"pageViews\" && (\n          <div className={styles.pageViewsSection}>\n            <div className={styles.pageViewsHeader}>\n              <h2 className={styles.pageViewsTitle}>\n                <span className={styles.pageViewsIcon}>📄</span>\n                Page Views Analytics\n              </h2>\n              <div className={styles.viewsCounter}>\n                <div className={styles.totalViews}>\n                  <span className={styles.viewsNumber}>\n                    {filteredData.pageViews.length.toLocaleString()}\n                  </span>\n                  <span className={styles.viewsLabel}>Total Views</span>\n                  <div className={styles.viewsGrowth}>\n                    <span>📈</span>\n                    +12.5% this week\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Page Views Statistics */}\n            <div className={styles.pageViewsStats}>\n              <div className={styles.statCard}>\n                <div className={styles.statIcon}>🌍</div>\n                <div className={styles.statValue}>\n                  {enhancedSummary.uniquePaths}\n                </div>\n                <div className={styles.statLabel}>Unique Pages</div>\n              </div>\n              <div className={styles.statCard}>\n                <div className={styles.statIcon}>⚡</div>\n                <div className={styles.statValue}>\n                  {enhancedSummary.sessionsCount > 0\n                    ? (\n                        enhancedSummary.totalPageViews /\n                        enhancedSummary.sessionsCount\n                      ).toFixed(1)\n                    : \"0\"}\n                </div>\n                <div className={styles.statLabel}>Avg. Pages/Session</div>\n              </div>\n              <div className={styles.statCard}>\n                <div className={styles.statIcon}>🎯</div>\n                <div className={styles.statValue}>\n                  {enhancedSummary.bounceRate.toFixed(1)}%\n                </div>\n                <div className={styles.statLabel}>Bounce Rate</div>\n              </div>\n              <div className={styles.statCard}>\n                <div className={styles.statIcon}>👥</div>\n                <div className={styles.statValue}>\n                  {enhancedSummary.sessionsCount}\n                </div>\n                <div className={styles.statLabel}>Active Sessions</div>\n              </div>\n            </div>\n\n            <div className={styles.tableContainer}>\n              <table className={styles.enhancedTable}>\n                <thead>\n                  <tr>\n                    <th>Page Path</th>\n                    <th>Timestamp</th>\n                    <th>Referrer Source</th>\n                    <th>Time Ago</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredData.pageViews\n                    .slice()\n                    .reverse()\n                    .slice(0, 100) // Limit to 100 recent entries\n                    .map((view, i) => {\n                      const timeDiff =\n                        Date.now() - new Date(view.timestamp).getTime();\n                      const isRecent = timeDiff < 3600000; // Less than 1 hour\n                      const isOld = timeDiff > 86400000; // More than 1 day\n                      const referrer = view.referrer || \"Direct\";\n                      const isDirect = referrer === \"Direct\";\n\n                      return (\n                        <tr key={i}>\n                          <td className={styles.enhancedPathCell}>\n                            {view.path}\n                          </td>\n                          <td className={styles.enhancedTimeCell}>\n                            {formatDate(view.timestamp)}\n                          </td>\n                          <td\n                            className={`${styles.enhancedReferrerCell} ${\n                              isDirect\n                                ? styles.directTraffic\n                                : styles.externalReferrer\n                            }`}\n                          >\n                            {referrer}\n                          </td>\n                          <td className={styles.enhancedRelativeTimeCell}>\n                            <span\n                              className={`${styles.timeAgo} ${\n                                isRecent\n                                  ? styles.recentIndicator\n                                  : isOld\n                                  ? styles.oldIndicator\n                                  : \"\"\n                              }`}\n                            >\n                              {formatRelativeTime(view.timestamp)}\n                            </span>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </table>\n            </div>\n\n            {/* Pagination for large datasets */}\n            {filteredData.pageViews.length > 100 && (\n              <div className={styles.pageViewsPagination}>\n                <button className={styles.paginationButton} disabled>\n                  ← Previous\n                </button>\n                <span className={styles.pageInfo}>\n                  Showing 1-100 of {filteredData.pageViews.length} views\n                </span>\n                <button className={styles.paginationButton}>Next →</button>\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeTab === \"interactions\" && (\n          <div className={styles.dataCard}>\n            <div className={styles.cardHeader}>\n              <h2>🎯 Recent Interactions</h2>\n              <span className={styles.resultCount}>\n                {filteredData.interactions.length} results\n              </span>\n            </div>\n            <div className={styles.tableContainer}>\n              <table className={styles.table}>\n                <thead>\n                  <tr>\n                    <th>Type</th>\n                    <th>Target</th>\n                    <th>Text</th>\n                    <th>Time</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredData.interactions\n                    .slice()\n                    .reverse()\n                    .slice(0, 100) // Limit to 100 recent entries\n                    .map((interaction, i) => (\n                      <tr key={i}>\n                        <td className={styles.typeCell}>\n                          <span className={styles.interactionBadge}>\n                            {interaction.type}\n                          </span>\n                        </td>\n                        <td className={styles.targetCell}>\n                          {interaction.href}\n                        </td>\n                        <td className={styles.textCell}>{interaction.text}</td>\n                        <td className={styles.timeCell}>\n                          {formatRelativeTime(interaction.timestamp)}\n                        </td>\n                      </tr>\n                    ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n\n        {activeTab === \"performance\" && (\n          <div className={styles.performanceSection}>\n            <h2>⚡ Performance Metrics</h2>\n            <div className={styles.chartsContainer}>\n              <div className={styles.mainChart}>\n                <PerformanceChart metrics={performanceMetrics} />\n              </div>\n              <div className={styles.clsChart}>\n                <CLSChart cls={performanceMetrics.cls} />\n              </div>\n              <div className={styles.performanceTable}>\n                <table className={styles.table}>\n                  <thead>\n                    <tr>\n                      <th>Metric</th>\n                      <th>Value</th>\n                      <th>Status</th>\n                      <th>Description</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {[\n                      {\n                        name: \"FCP\",\n                        value: performanceMetrics.fcp,\n                        unit: \"ms\",\n                        description: \"First Contentful Paint\",\n                        thresholds: { good: 1800, needs: 3000 },\n                      },\n                      {\n                        name: \"LCP\",\n                        value: performanceMetrics.lcp,\n                        unit: \"ms\",\n                        description: \"Largest Contentful Paint\",\n                        thresholds: { good: 2500, needs: 4000 },\n                      },\n                      {\n                        name: \"TTFB\",\n                        value: performanceMetrics.ttfb,\n                        unit: \"ms\",\n                        description: \"Time to First Byte\",\n                        thresholds: { good: 800, needs: 1800 },\n                      },\n                      {\n                        name: \"FID\",\n                        value: performanceMetrics.fid,\n                        unit: \"ms\",\n                        description: \"First Input Delay\",\n                        thresholds: { good: 100, needs: 300 },\n                      },\n                      {\n                        name: \"CLS\",\n                        value: performanceMetrics.cls,\n                        unit: \"\",\n                        description: \"Cumulative Layout Shift\",\n                        thresholds: { good: 0.1, needs: 0.25 },\n                      },\n                    ].map((metric) => {\n                      const value = metric.value;\n                      let status = \"unknown\";\n                      if (value !== null && value !== undefined) {\n                        if (value <= metric.thresholds.good) status = \"good\";\n                        else if (value <= metric.thresholds.needs)\n                          status = \"needs-improvement\";\n                        else status = \"poor\";\n                      }\n\n                      return (\n                        <tr key={metric.name}>\n                          <td className={styles.metricName}>{metric.name}</td>\n                          <td className={styles.metricValue}>\n                            {value\n                              ? `${value.toFixed(\n                                  metric.name === \"CLS\" ? 3 : 2\n                                )}${metric.unit}`\n                              : \"N/A\"}\n                          </td>\n                          <td className={styles.metricStatus}>\n                            <span\n                              className={`${styles.statusBadge} ${styles[status]}`}\n                            >\n                              {status === \"good\"\n                                ? \"✅ Good\"\n                                : status === \"needs-improvement\"\n                                ? \"⚠️ Needs Work\"\n                                : status === \"poor\"\n                                ? \"❌ Poor\"\n                                : \"❓ Unknown\"}\n                            </span>\n                          </td>\n                          <td className={styles.metricDescription}>\n                            {metric.description}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === \"traffic\" && (\n          <div className={styles.dataCard}>\n            <div className={styles.cardHeader}>\n              <h2>🌐 Traffic Sources</h2>\n            </div>\n            <div className={styles.trafficSources}>\n              {Object.entries(enhancedSummary.trafficSources)\n                .sort((a, b) => b[1] - a[1])\n                .map(([source, count]) => (\n                  <div key={source} className={styles.trafficSourceItem}>\n                    <div className={styles.sourceInfo}>\n                      <span className={styles.sourceName}>{source}</span>\n                      <span className={styles.sourceCount}>{count} visits</span>\n                    </div>\n                    <div className={styles.sourceBar}>\n                      <div\n                        className={styles.sourceBarFill}\n                        style={{\n                          width: `${\n                            (count /\n                              Math.max(\n                                ...Object.values(enhancedSummary.trafficSources)\n                              )) *\n                            100\n                          }%`,\n                        }}\n                      ></div>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Footer Actions */}\n      <div className={styles.footerActions}>\n        <div className={styles.footerInfo}>\n          <div className={styles.lastUpdated}>\n            Last updated: {lastRefresh.toLocaleString()}\n          </div>\n          <div className={styles.dataStats}>\n            Showing {filteredData.pageViews.length} page views •{\" \"}\n            {filteredData.interactions.length} interactions\n          </div>\n        </div>\n        <div className={styles.footerButtons}>\n          <button\n            className={styles.clearButton}\n            onClick={() => {\n              if (\n                window.confirm(\n                  \"Are you sure you want to clear all analytics data? This action cannot be undone.\"\n                )\n              ) {\n                localStorage.removeItem(\"rg_analytics\");\n                localStorage.removeItem(\"rg_interactions\");\n                setAnalyticsData({\n                  pageViews: [],\n                  interactions: [],\n                  summary: {\n                    totalPageViews: 0,\n                    totalInteractions: 0,\n                    uniquePaths: 0,\n                  },\n                });\n                setLastRefresh(new Date());\n              }\n            }}\n          >\n            🗑️ Clear All Data\n          </button>\n          <button\n            className={styles.logoutButton}\n            onClick={() => {\n              setIsAuthorized(false);\n              setPassword(\"\");\n            }}\n          >\n            🚪 Logout\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminPanel;\n"],"names":["ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","PerformanceChart","metrics","isDarkMode","useContext","ThemeContext","textColor","gridColor","chartData","options","context","label","jsx","Bar","ArcElement","CLSChart","cls","backgroundColor","borderColor","remainingSegment","scoreDescription","scoreColor","jsxs","Doughnut","getInteractionIcon","type","icons","getInteractionTrend","trends","AdminPanel","analyticsData","setAnalyticsData","useState","activeTab","setActiveTab","isAuthorized","setIsAuthorized","password","setPassword","dateFilter","setDateFilter","searchTerm","setSearchTerm","isLoading","setIsLoading","autoRefresh","setAutoRefresh","lastRefresh","setLastRefresh","sortBy","setSortBy","sortOrder","setSortOrder","performanceMetrics","usePerformanceMonitoring","useEffect","data","SimpleAnalytics","interval","filteredData","useMemo","now","filterDate","items","cutoffDate","item","filterSearch","searchField","_a","sortItems","a","b","aValue","bValue","filteredPageViews","filteredInteractions","enhancedSummary","pageViews","interactions","pageViewCounts","acc","view","sessions","sessionKey","bounceRate","session","topPages","interactionTypes","interaction","trafficSources","source","exportData","format","dataToExport","blob","url","csvContent","row","cell","handleAuth","e","formatDate","dateString","formatRelativeTime","date","diff","minutes","hours","days","styles","tab","path","count","index","i","timeDiff","isRecent","isOld","referrer","isDirect","metric","value","status"],"mappings":"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"}